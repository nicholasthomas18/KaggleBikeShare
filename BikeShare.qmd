---
title: "BikeShare"
format: html
editor: visual
---

```{r}
# Load in Packages
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(lubridate)
library(ranger)
```

```{r}
# Bring in Data
bikedata <- vroom("/Users/nicholasthomas/Desktop/STATISTICS/STAT 348/BikeShare/bike-sharing-demand/train.csv")
testdata <- vroom("/Users/nicholasthomas/Desktop/STATISTICS/STAT 348/BikeShare/bike-sharing-demand/test.csv")

```

```{r}
# Data Wrangling
# Dump casual and registered
bikedata <- bikedata |>
  select(-casual, -registered)

# Change count to log(count)
bikedata <- bikedata |>
  mutate(count = log(count))

```

```{r}
# Recipe to recode weather, extract hour, make season factor...
my_recipe <- recipe(count ~., data = bikedata) |>
  step_mutate(weather = if_else(weather == 4, 3, weather)) |>
  step_mutate(weather = factor(weather)) |>
  step_time(datetime, features = "hour") |>
  step_mutate(season = factor(season)) |>
  step_corr(all_numeric_predictors(), threshold = 0.5) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = bikedata)
```

```{r}
# Regression Tree
my_mod <- rand_forest(mtry = tune(),
                        min_n = tune(),
                        trees = 500) |>
  set_engine("ranger") |>
  set_mode("regression")

forest_wf <- workflow() |>
  add_recipe(my_recipe) |>
  add_model(my_mod)

# Create a grid of tuning values
forest_grid <- grid_regular(mtry(range = c(1, 12)),
                                      min_n(),
                                      levels = 5)

folds <- vfold_cv(bikedata, v = 5, repeats=1)
```

```{r}
# Run the Cross Validation
forest_CV_results <- forest_wf |>
  tune_grid(
    resamples = folds,
    grid = forest_grid,
    metrics = metric_set(rmse)
  )
```

```{r}
# Find best tuning params
forest_best_tune <- forest_CV_results |>
  select_best(metric = "rmse")
```

```{r}
# Finalize workflow
forest_final <- forest_wf |>
  finalize_workflow(forest_best_tune) |>
  fit(data = bikedata)
```

```{r}
# Predict the test data
forest_predictions <- forest_final |>
  predict(new_data = testdata) |>
  mutate(.pred = exp(.pred))
```

```{r}
# Format & submit to Kaggle
kaggle_submission <- bind_cols(forest_predictions, testdata) |>
  select(datetime, .pred) |>
  rename(count = .pred) |>
  mutate(count = pmax(0, count),
         datetime = as.character(format(datetime)))

vroom_write(x=kaggle_submission, file="./RandomForest.csv", delim=",")
```
